import React, { useState, useEffect, useRef } from 'react';
import {
  ChatBubbleLeftRightIcon,
  PaperAirplaneIcon,
  UserIcon,
  CpuChipIcon,
  ExclamationTriangleIcon,
  CheckCircleIcon,
  ClockIcon,
  MicrophoneIcon,
  LanguageIcon,
  SparklesIcon,
  MapPinIcon,
  BoltIcon,
  BeakerIcon,
  ExclamationCircleIcon,
  CogIcon,
  CloudIcon,
  DocumentTextIcon,
  ChartBarIcon
} from '@heroicons/react/24/outline';
import { useAuth } from '../contexts/AuthContext';
import GroqService from '../services/GroqService';

interface ChatMessage {
  id: string;
  text: string;
  sender: 'user' | 'bot';
  timestamp: Date;
  type?: 'text' | 'quick_reply' | 'system';
  suggestions?: string[];
}

interface QuickReply {
  id: string;
  text: string;
  category: string;
  icon: React.ReactNode;
}

const SmartChatbot: React.FC = () => {
  const { user } = useAuth();
  const [messages, setMessages] = useState<ChatMessage[]>([]);
  const [inputText, setInputText] = useState('');
  const [isTyping, setIsTyping] = useState(false);
  const [isConnected, setIsConnected] = useState(false);
  const [selectedLanguage, setSelectedLanguage] = useState('en');
  const [showQuickReplies, setShowQuickReplies] = useState(true);
  const messagesEndRef = useRef<HTMLDivElement>(null);
  const groqService = GroqService.getInstance();

  const languages = [
    { code: 'en', name: 'English', flag: 'ЁЯЗ║ЁЯЗ╕' },
    { code: 'hi', name: 'рд╣рд┐рдВрджреА', flag: 'ЁЯЗоЁЯЗ│' },
    { code: 'mr', name: 'рдорд░рд╛рдареА', flag: 'ЁЯЗоЁЯЗ│' },
    { code: 'bn', name: 'ржмрж╛ржВрж▓рж╛', flag: 'ЁЯЗзЁЯЗй' },
    { code: 'ta', name: 'родрооро┐ро┤рпН', flag: 'ЁЯЗоЁЯЗ│' },
    { code: 'te', name: 'р░др▒Жр░▓р▒Бр░Чр▒Б', flag: 'ЁЯЗоЁЯЗ│' }
  ];

  const quickReplies: QuickReply[] = [
    { id: '1', text: 'Check water quality', category: 'water', icon: <BeakerIcon className="h-4 w-4" /> },
    { id: '2', text: 'Energy consumption today', category: 'energy', icon: <BoltIcon className="h-4 w-4" /> },
    { id: '3', text: 'Crop health status', category: 'agriculture', icon: <SparklesIcon className="h-4 w-4" /> },
    { id: '4', text: 'Emergency contacts', category: 'emergency', icon: <ExclamationCircleIcon className="h-4 w-4" /> },
    { id: '5', text: 'Village map overview', category: 'map', icon: <MapPinIcon className="h-4 w-4" /> },
    { id: '6', text: 'Weather forecast', category: 'weather', icon: <ClockIcon className="h-4 w-4" /> }
  ];

  // Initialize chatbot
  useEffect(() => {
    const initializeChatbot = async () => {
      try {
        const hasKey = groqService.hasApiKey();
        setIsConnected(hasKey);
        
        if (hasKey) {
          // Welcome message
          const welcomeMessage: ChatMessage = {
            id: Date.now().toString(),
            text: getWelcomeMessage(),
            sender: 'bot',
            timestamp: new Date(),
            type: 'text',
            suggestions: ['What can you help me with?', 'Show village status', 'Emergency information']
          };
          setMessages([welcomeMessage]);
        } else {
          const errorMessage: ChatMessage = {
            id: Date.now().toString(),
            text: 'Sorry, I need an API key to function properly. Please configure the Gemini API key.',
            sender: 'bot',
            timestamp: new Date(),
            type: 'system'
          };
          setMessages([errorMessage]);
        }
      } catch (error) {
        console.error('Failed to initialize chatbot:', error);
      }
    };

    initializeChatbot();
  }, []);

  // Auto-scroll to bottom
  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  }, [messages]);

  const getWelcomeMessage = () => {
    const currentLang = languages.find(lang => lang.code === selectedLanguage);
    
    switch (selectedLanguage) {
      case 'hi':
        return `рдирдорд╕реНрддреЗ ${user?.name || 'рдорд┐рддреНрд░'}! рдореИрдВ рд╕рд╣рд╛рдпрдХ рд╣реВрдБ, рдЖрдкрдХрд╛ рд╕реНрдорд╛рд░реНрдЯ рд╡рд┐рд▓реЗрдЬ AI рдЕрд╕рд┐рд╕реНрдЯреЗрдВрдЯред рдореИрдВ рдЖрдкрдХреЛ рдЧрд╛рдБрд╡ рдХреЗ рдмреБрдирд┐рдпрд╛рджреА рдврд╛рдВрдЪреЗ, рдкрд╛рдиреА рдХреА рдЧреБрдгрд╡рддреНрддрд╛, рдКрд░реНрдЬрд╛ рдкреНрд░рдмрдВрдзрди, рдХреГрд╖рд┐ рдФрд░ рдЖрдкрд╛рддрдХрд╛рд▓реАрди рд╕реЗрд╡рд╛рдУрдВ рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рдЬрд╛рдирдХрд╛рд░реА рджреЗ рд╕рдХрддрд╛ рд╣реВрдБред рдЖрдк рдореБрдЭрд╕реЗ рдХреНрдпрд╛ рдЬрд╛рдирдирд╛ рдЪрд╛рд╣рддреЗ рд╣реИрдВ?`;
      case 'mr':
        return `рдирдорд╕реНрдХрд╛рд░ ${user?.name || 'рдорд┐рддреНрд░рд╛'}! рдореА рд╕рд╣рд╛рдпрдХ рдЖрд╣реЗ, рддреБрдордЪрд╛ рд╕реНрдорд╛рд░реНрдЯ рд╡реНрд╣рд┐рд▓реЗрдЬ AI рдЕрд╕рд┐рд╕реНрдЯрдВрдЯред рдореА рддреБрдореНрд╣рд╛рд▓рд╛ рдЧрд╛рд╡рд╛рддреАрд▓ рдкрд╛рдпрд╛рднреВрдд рд╕реБрд╡рд┐рдзрд╛, рдкрд╛рдгреНрдпрд╛рдЪреА рдЧреБрдгрд╡рддреНрддрд╛, рдКрд░реНрдЬрд╛ рд╡реНрдпрд╡рд╕реНрдерд╛рдкрди, рд╢реЗрддреА рдЖрдгрд┐ рдЖрдкрддреНрдХрд╛рд▓реАрди рд╕реЗрд╡рд╛рдВрдмрджреНрджрд▓ рдорд╛рд╣рд┐рддреА рджреЗрдК рд╢рдХрддреЛред рддреБрдореНрд╣рд╛рд▓рд╛ рдХрд╛рдп рдЬрд╛рдгреВрди рдШреНрдпрд╛рдпрдЪреЗ рдЖрд╣реЗ?`;
      default:
        return `Hello ${user?.name || 'there'}! I'm Sahayak, your Smart Village AI Assistant. I can help you with village infrastructure, water quality, energy management, agriculture, and emergency services. What would you like to know?`;
    }
  };

  const processUserMessage = async (message: string) => {
    setIsTyping(true);
    
    try {
      // Create context for the AI based on village management
      const context = `You are a Smart Village AI Assistant helping with rural infrastructure management. 
      Current user language: ${selectedLanguage}
      User message: "${message}"
      
      You can help with:
      - Water quality monitoring (pH: 7.2, TDS: 320 ppm, Chlorine: 0.5 ppm)
      - Energy management (Solar: 503 kW, Grid: 150 kW, Battery: 75%)
      - Agriculture (Rice: 87% health, Wheat: 92% health, 25 acres total)
      - Emergency services (2 active alerts, 3 available resources)
      - Village map and infrastructure status
      - Weather forecast and planning
      
      Provide helpful, accurate information in ${selectedLanguage === 'hi' ? 'Hindi' : selectedLanguage === 'mr' ? 'Marathi' : 'English'}.
      Keep responses concise but informative.`;

      const response = await groqService.processVoiceCommand({
        text: context,
        language: selectedLanguage,
        context: 'village_management'
      });

      const botMessage: ChatMessage = {
        id: Date.now().toString(),
        text: response.response || generateFallbackResponse(message),
        sender: 'bot',
        timestamp: new Date(),
        type: 'text',
        suggestions: generateSuggestions(message)
      };

      setMessages(prev => [...prev, botMessage]);
    } catch (error) {
      console.error('Error processing message:', error);
      
      const errorMessage: ChatMessage = {
        id: Date.now().toString(),
        text: generateFallbackResponse(message),
        sender: 'bot',
        timestamp: new Date(),
        type: 'text'
      };

      setMessages(prev => [...prev, errorMessage]);
    } finally {
      setIsTyping(false);
    }
  };

  const generateFallbackResponse = (message: string): string => {
    const lowerMessage = message.toLowerCase();
    
    // Water-related queries
    if (lowerMessage.includes('water') || lowerMessage.includes('рдкрд╛рдиреА') || lowerMessage.includes('рдкрд╛рдгреА')) {
      return selectedLanguage === 'hi' 
        ? 'рдкрд╛рдиреА рдХреА рдЧреБрдгрд╡рддреНрддрд╛ рдЕрдЪреНрдЫреА рд╣реИред pH: 7.2, TDS: 320 ppm, рдХреНрд▓реЛрд░реАрди: 0.5 ppmред рд╕рднреА рд╕реНрд░реЛрдд рд╕рдХреНрд░рд┐рдп рд╣реИрдВред'
        : selectedLanguage === 'mr'
        ? 'рдкрд╛рдгреНрдпрд╛рдЪреА рдЧреБрдгрд╡рддреНрддрд╛ рдЪрд╛рдВрдЧрд▓реА рдЖрд╣реЗред pH: 7.2, TDS: 320 ppm, рдХреНрд▓реЛрд░реАрди: 0.5 ppmред рд╕рд░реНрд╡ рд╕реНрд░реЛрдд рд╕рдХреНрд░рд┐рдп рдЖрд╣реЗрддред'
        : 'Water quality is good. pH: 7.2, TDS: 320 ppm, Chlorine: 0.5 ppm. All sources are active.';
    }
    
    // Energy-related queries
    if (lowerMessage.includes('energy') || lowerMessage.includes('power') || lowerMessage.includes('рдКрд░реНрдЬрд╛') || lowerMessage.includes('рдмрд┐рдЬрд▓реА')) {
      return selectedLanguage === 'hi'
        ? 'рдКрд░реНрдЬрд╛ рд╕реНрдерд┐рддрд┐: рд╕реЛрд▓рд░ 503 kW, рдЧреНрд░рд┐рдб 150 kW, рдмреИрдЯрд░реА 75% рдЪрд╛рд░реНрдЬред рд╕рд┐рд╕реНрдЯрдо рджрдХреНрд╖рддрд╛ 96%ред'
        : selectedLanguage === 'mr'
        ? 'рдКрд░реНрдЬрд╛ рд╕реНрдерд┐рддреА: рд╕реЛрд▓рд░ 503 kW, рдЧреНрд░рд┐рдб 150 kW, рдмреЕрдЯрд░реА 75% рдЪрд╛рд░реНрдЬред рд╕рд┐рд╕реНрдЯрдо рдХрд╛рд░реНрдпрдХреНрд╖рдорддрд╛ 96%ред'
        : 'Energy status: Solar 503 kW, Grid 150 kW, Battery 75% charged. System efficiency 96%.';
    }
    
    // Agriculture-related queries
    if (lowerMessage.includes('crop') || lowerMessage.includes('farm') || lowerMessage.includes('рдлрд╕рд▓') || lowerMessage.includes('рдЦреЗрддреА')) {
      return selectedLanguage === 'hi'
        ? 'рдлрд╕рд▓ рдХреА рд╕реНрдерд┐рддрд┐: рдзрд╛рди 87% рд╕реНрд╡рд╕реНрде, рдЧреЗрд╣реВрдВ 92% рд╕реНрд╡рд╕реНрдеред рдХреБрд▓ 25 рдПрдХрдбрд╝ рдореЗрдВ рдЦреЗрддреАред рдореМрд╕рдо рдЕрдиреБрдХреВрд▓ рд╣реИред'
        : selectedLanguage === 'mr'
        ? 'рдкрд┐рдХрд╛рдЪреА рд╕реНрдерд┐рддреА: рддрд╛рдВрджреВрд│ 87% рдирд┐рд░реЛрдЧреА, рдЧрд╣реВ 92% рдирд┐рд░реЛрдЧреАред рдПрдХреВрдг 25 рдПрдХрд░ рд╢реЗрддреА. рд╣рд╡рд╛рдорд╛рди рдЕрдиреБрдХреВрд▓ рдЖрд╣реЗ.'
        : 'Crop status: Rice 87% healthy, Wheat 92% healthy. Total 25 acres under cultivation. Weather is favorable.';
    }
    
    // Emergency-related queries
    if (lowerMessage.includes('emergency') || lowerMessage.includes('alert') || lowerMessage.includes('рдЖрдкрд╛рддрдХрд╛рд▓') || lowerMessage.includes('рдЖрдкрддреНрдХрд╛рд▓реАрди')) {
      return selectedLanguage === 'hi'
        ? 'рдЖрдкрд╛рддрдХрд╛рд▓реАрди рд╕реНрдерд┐рддрд┐: 2 рд╕рдХреНрд░рд┐рдп рдЕрд▓рд░реНрдЯ, 3 рд╕рдВрд╕рд╛рдзрди рдЙрдкрд▓рдмреНрдзред рдЖрдкрд╛рддрдХрд╛рд▓реАрди рдирдВрдмрд░: 108, 102, 101ред'
        : selectedLanguage === 'mr'
        ? 'рдЖрдкрддреНрдХрд╛рд▓реАрди рд╕реНрдерд┐рддреА: 2 рд╕рдХреНрд░рд┐рдп рдЕрд▓рд░реНрдЯ, 3 рд╕рдВрд╕рд╛рдзрдиреЗ рдЙрдкрд▓рдмреНрдз. рдЖрдкрддреНрдХрд╛рд▓реАрди рдирдВрдмрд░: 108, 102, 101.'
        : 'Emergency status: 2 active alerts, 3 resources available. Emergency numbers: 108, 102, 101.';
    }
    
    // Default response
    return selectedLanguage === 'hi'
      ? 'рдореИрдВ рдЖрдкрдХреА рдорджрдж рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдпрд╣рд╛рдБ рд╣реВрдБред рдЖрдк рдореБрдЭрд╕реЗ рдЧрд╛рдБрд╡ рдХреЗ рдмреБрдирд┐рдпрд╛рджреА рдврд╛рдВрдЪреЗ, рдкрд╛рдиреА, рдКрд░реНрдЬрд╛, рдХреГрд╖рд┐ рдпрд╛ рдЖрдкрд╛рддрдХрд╛рд▓реАрди рд╕реЗрд╡рд╛рдУрдВ рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рдкреВрдЫ рд╕рдХрддреЗ рд╣реИрдВред'
      : selectedLanguage === 'mr'
      ? 'рдореА рддреБрдордЪреА рдорджрдд рдХрд░рдгреНрдпрд╛рд╕рд╛рдареА рдпреЗрдереЗ рдЖрд╣реЗ. рддреБрдореНрд╣реА рдорд▓рд╛ рдЧрд╛рд╡рд╛рддреАрд▓ рдкрд╛рдпрд╛рднреВрдд рд╕реБрд╡рд┐рдзрд╛, рдкрд╛рдгреА, рдКрд░реНрдЬрд╛, рд╢реЗрддреА рдХрд┐рдВрд╡рд╛ рдЖрдкрддреНрдХрд╛рд▓реАрди рд╕реЗрд╡рд╛рдВрдмрджреНрджрд▓ рд╡рд┐рдЪрд╛рд░реВ рд╢рдХрддрд╛.'
      : 'I\'m here to help you! You can ask me about village infrastructure, water, energy, agriculture, or emergency services.';
  };

  const generateSuggestions = (message: string): string[] => {
    const lowerMessage = message.toLowerCase();
    
    if (lowerMessage.includes('water') || lowerMessage.includes('рдкрд╛рдиреА')) {
      return ['Show water sources', 'Check quality alerts', 'Schedule maintenance'];
    }
    if (lowerMessage.includes('energy') || lowerMessage.includes('рдКрд░реНрдЬрд╛')) {
      return ['Solar performance', 'Battery status', 'Cost savings'];
    }
    if (lowerMessage.includes('crop') || lowerMessage.includes('рдлрд╕рд▓')) {
      return ['Weather forecast', 'Market prices', 'Irrigation schedule'];
    }
    
    return ['Village overview', 'System status', 'Emergency info'];
  };

  const handleSendMessage = async () => {
    if (!inputText.trim()) return;

    const userMessage: ChatMessage = {
      id: Date.now().toString(),
      text: inputText,
      sender: 'user',
      timestamp: new Date(),
      type: 'text'
    };

    setMessages(prev => [...prev, userMessage]);
    setInputText('');
    setShowQuickReplies(false);

    await processUserMessage(inputText);
  };

  const handleQuickReply = async (reply: QuickReply) => {
    const userMessage: ChatMessage = {
      id: Date.now().toString(),
      text: reply.text,
      sender: 'user',
      timestamp: new Date(),
      type: 'quick_reply'
    };

    setMessages(prev => [...prev, userMessage]);
    setShowQuickReplies(false);

    await processUserMessage(reply.text);
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage();
    }
  };

  return (
    <div className="h-screen flex flex-col bg-gradient-to-br from-blue-50 via-white to-purple-50">
      {/* Header */}
      <div className="bg-white shadow-sm border-b border-gray-200 p-4">
        <div className="flex items-center justify-between">
          <div className="flex items-center gap-4">
            <div className="p-3 bg-gradient-to-r from-blue-500 to-purple-600 rounded-2xl">
              <ChatBubbleLeftRightIcon className="h-8 w-8 text-white" />
            </div>
            <div>
              <h1 className="text-2xl font-bold text-gray-900">Sahayak - Smart Village AI Assistant</h1>
              <div className="flex items-center gap-2">
                <div className={`w-2 h-2 rounded-full ${isConnected ? 'bg-green-500' : 'bg-red-500'}`}></div>
                <p className="text-gray-600">
                  {isConnected ? 'Sahayak is Online' : 'Sahayak is Offline'}
                </p>
              </div>
            </div>
          </div>

          <div className="flex items-center gap-3">
            <select
              value={selectedLanguage}
              onChange={(e) => setSelectedLanguage(e.target.value)}
              className="px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
            >
              {languages.map((lang) => (
                <option key={lang.code} value={lang.code}>
                  {lang.flag} {lang.name}
                </option>
              ))}
            </select>
            
            <div className="flex items-center gap-2 px-3 py-2 bg-green-100 text-green-800 rounded-lg">
              <CpuChipIcon className="h-4 w-4" />
              <span className="text-sm font-medium">Groq AI</span>
            </div>
          </div>
        </div>
      </div>

      {/* Messages Area */}
      <div className="flex-1 overflow-y-auto p-4 space-y-4">
        {messages.map((message) => (
          <div key={message.id} className={`flex ${message.sender === 'user' ? 'justify-end' : 'justify-start'}`}>
            <div className={`max-w-xs lg:max-w-md xl:max-w-lg ${message.sender === 'user' ? 'order-2' : 'order-1'}`}>
              <div className={`flex items-start gap-3 ${message.sender === 'user' ? 'flex-row-reverse' : 'flex-row'}`}>
                <div className={`p-2 rounded-full ${message.sender === 'user' ? 'bg-blue-100' : 'bg-purple-100'}`}>
                  {message.sender === 'user' ? (
                    <UserIcon className="h-5 w-5 text-blue-600" />
                  ) : (
                    <CpuChipIcon className="h-5 w-5 text-purple-600" />
                  )}
                </div>
                
                <div className={`p-3 rounded-2xl ${
                  message.sender === 'user' 
                    ? 'bg-blue-600 text-white' 
                    : message.type === 'system'
                    ? 'bg-red-100 text-red-800 border border-red-200'
                    : 'bg-white text-gray-900 shadow-md border border-gray-200'
                }`}>
                  <p className="text-sm">{message.text}</p>
                  <p className={`text-xs mt-1 ${
                    message.sender === 'user' ? 'text-blue-200' : 'text-gray-500'
                  }`}>
                    {message.timestamp.toLocaleTimeString()}
                  </p>
                </div>
              </div>

              {/* Suggestions */}
              {message.suggestions && message.suggestions.length > 0 && (
                <div className="mt-2 flex flex-wrap gap-2">
                  {message.suggestions.map((suggestion, index) => (
                    <button
                      key={index}
                      onClick={() => {
                        setInputText(suggestion);
                        handleSendMessage();
                      }}
                      className="px-3 py-1 text-xs bg-gray-100 text-gray-700 rounded-full hover:bg-gray-200 transition-colors"
                    >
                      {suggestion}
                    </button>
                  ))}
                </div>
              )}
            </div>
          </div>
        ))}

        {/* Typing Indicator */}
        {isTyping && (
          <div className="flex justify-start">
            <div className="flex items-center gap-3">
              <div className="p-2 rounded-full bg-purple-100">
                <CpuChipIcon className="h-5 w-5 text-purple-600" />
              </div>
              <div className="p-3 rounded-2xl bg-white shadow-md border border-gray-200">
                <div className="flex space-x-1">
                  <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce"></div>
                  <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '0.1s' }}></div>
                  <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '0.2s' }}></div>
                </div>
              </div>
            </div>
          </div>
        )}

        <div ref={messagesEndRef} />
      </div>

      {/* Quick Replies */}
      {showQuickReplies && (
        <div className="p-4 bg-gray-50 border-t border-gray-200">
          <h3 className="text-sm font-medium text-gray-700 mb-3">Quick Questions:</h3>
          <div className="grid grid-cols-2 md:grid-cols-3 gap-2">
            {quickReplies.map((reply) => (
              <button
                key={reply.id}
                onClick={() => handleQuickReply(reply)}
                className="flex items-center gap-2 p-3 bg-white rounded-lg border border-gray-200 hover:border-blue-300 hover:bg-blue-50 transition-colors text-left"
              >
                {reply.icon}
                <span className="text-sm text-gray-700">{reply.text}</span>
              </button>
            ))}
          </div>
        </div>
      )}

      {/* Input Area */}
      <div className="p-4 bg-white border-t border-gray-200">
        <div className="flex items-center gap-3">
          <div className="flex-1 relative">
            <textarea
              value={inputText}
              onChange={(e) => setInputText(e.target.value)}
              onKeyPress={handleKeyPress}
              placeholder={selectedLanguage === 'hi' ? 'рдЕрдкрдирд╛ рд╕рд╡рд╛рд▓ рдпрд╣рд╛рдБ рд▓рд┐рдЦреЗрдВ...' : 
                         selectedLanguage === 'mr' ? 'рддреБрдордЪрд╛ рдкреНрд░рд╢реНрди рдпреЗрдереЗ рд▓рд┐рд╣рд╛...' : 
                         'Type your question here...'}
              className="w-full p-3 pr-12 border border-gray-300 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent resize-none"
              rows={1}
              style={{ minHeight: '44px', maxHeight: '120px' }}
            />
          </div>
          
          <button
            onClick={handleSendMessage}
            disabled={!inputText.trim() || isTyping}
            className="p-3 bg-blue-600 text-white rounded-xl hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
          >
            <PaperAirplaneIcon className="h-5 w-5" />
          </button>
        </div>
        
        <div className="flex items-center justify-between mt-2 text-xs text-gray-500">
          <span>Press Enter to send, Shift+Enter for new line</span>
          <span>Powered by Groq AI</span>
        </div>
      </div>
    </div>
  );
};

export default SmartChatbot;
